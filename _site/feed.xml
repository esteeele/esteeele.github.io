<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2025-10-20T13:17:43+01:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Ed’s Blog</title><subtitle>A personal blog where I&apos;ll write stuff and things</subtitle><author><name>Edmund Steele</name></author><entry><title type="html">More things I’ve learned about developing enterprise software</title><link href="http://localhost:4000/software/2025/10/19/more-software-engineer-things-i-have-learned.html" rel="alternate" type="text/html" title="More things I’ve learned about developing enterprise software" /><published>2025-10-19T13:00:18+01:00</published><updated>2025-10-19T13:00:18+01:00</updated><id>http://localhost:4000/software/2025/10/19/more-software-engineer-things-i-have-learned</id><content type="html" xml:base="http://localhost:4000/software/2025/10/19/more-software-engineer-things-i-have-learned.html"><![CDATA[<p>In the past year I’ve become increasingly senior at my job, being pushed into more engagement with various stakeholders at a large, UK fintech. While earlier in my career I worked very closely with product managers and leadership at a much smaller company, there’s a world of difference to working with large teams who are extremely removed from software development.</p>

<p>This post tries to encapsulate what I’ve learned, or has further been reinforced recently.</p>

<h2 id="soft-skills">‘Soft’ Skills</h2>

<p>Soft Skills as you become more senior (unless you’re a super specialised developer) become probably more important than tech ones, or at least the line becomes horribly blurred, for doing your job.</p>

<h3 id="understanding-different-ways-of-thinking">Understanding different ways of thinking</h3>

<p><em>Engineers have a different mindset to business stakeholders</em></p>

<p>For business stakeholders the main reason for praise/prestige tends to be around identifying problems.</p>

<p>Engineers are praised for solving problems.</p>

<p>Trying to get a mix of both is crucial - but doing too much of one and not enough of the other is an issue. Too much problem identification tends towards circular conversations without a resolution. Engineers diving too soon into coming up with solutions can risk creating fixes to problems that don’t really exist - or even worse than that building subtly incorrectly mis-modelling real world business logic.</p>

<p>Here team work and effective communication is crucial. All meetings should have an intended outcome, and engineers should either understand the domain well enough to model it correctly, or product managers need to step in.</p>

<h3 id="dealing-with-timelines">Dealing with timelines</h3>

<p>Engineering is unusual in that success is based on timelines rather than outcomes. This is an endless problem that everyone struggles with, because generally we create a thing and it’s just assumed to be essentially bug free, highly available and easy to modify and change. It’s important to stress that (especially as a company’s tech stack grows and matures) that this stuff isn’t “free” and will require work. This can stray into coming up with Non-Functional Requirements - which in my opinion are showing things going slightly wrong, because it’s a kind of imposition of restrictive categoric data onto what is often quite ephemeral. I.e. do I feel this software is nice to work with?</p>

<p>The best way lies in building up personal relationships and trust between you and others and hoping that your judgement and expertise will be trusted. If it’s not, and it’s impossible then you potentially work at a chop shop and it’s time to move on. In the worst case pushing back more aggressively with comments meant to illustrate the difficulty of delivering to timelines can help (but be careful) e.g. <em>It would be unfair to ask you (sales) what exactly what date you expect to sign (customer) because we are interested in outcomes rather than timelines.</em> The idea here is to point out an absurdity we often see e.g. <em>in March having a conversation where you commit to having features 1..50 on the spreadsheet all being in place at 9AM on the 17th September.</em></p>

<h3 id="stakeholders-abhor-a-vacuum">Stakeholders abhor a vacuum</h3>

<p>So this is something I’ve seen over and over again in my career. The nature of software development work (especially at early stages of a project but really throughout) means it’s hard to communicate what’s really going on.  Often it can look from the outside like no progress is being made - in early stage design, during periods of heavier refactoring - then suddenly everything happens at once.</p>

<p>The issue is that if you’re not upfront about what’s going on business leaders will often assume the worse, especially if you’re not in a high trust environment. What’s being asked for is so so often totally reasonable - just a few bullet points about what the team has been doing, what’s been challenging etc.. In many cases ‘micromanagement’ comes from this communication vacuum, where a middle manager isn’t certain of what’s happening, is being leant on my a senior manager who has no idea what’s happening. If you can send bite sized chunks of useful information up that chain it’ll keep managers happy and off your back. (In an ideal world)</p>

<h3 id="looking-after-developers-in-your-team-if-not-a-people-manager">Looking after developers in your team (if not a people manager)</h3>

<p>It’s also vital to learn how to delegate well. 9 times out of 10 people don’t know exactly what you’re doing, or even how best to help you with the workload - you can’t just drop work onto people’s lap and immediately expect them to get started. Delegation can often take time away initially but pays itself back over time.</p>

<p>Give Praise: This one is huge, especially for new starters or people who may lack confidence. SEng can be lonely at times, and quite a negative job</p>
<ul>
  <li>Dealing with customer reported issues</li>
  <li>Pushing back on timelines and “disappointing” other people in the business</li>
  <li>An often challenging and esoteric job we do a lot of in isolation</li>
</ul>

<p>In a way that may not be obvious people (especially but not exclusively juniors) have massive imposter syndrome which can become a deeply negative feedback loop.</p>
<ul>
  <li>I’m not good enough to do this work</li>
  <li>So I’ll do something else, or not trust my judgement and get someone else to do the hard parts</li>
  <li>So I don’t improve and gain confidence</li>
  <li>So my imposter syndrome sticks around</li>
</ul>

<p>While doing a kind of Big Tech AI “Wow - What an interesting and intelligent insight that gets right to the heart of …” doesn’t help anyone because its obviously disingenuous - remembering to give praise where its earned makes a huge difference. For example if you’re reviewing a PR that has a couple of minor of issues but is overall pretty OK then remember to include the praise for the 90% that’s good. Dropping a comment to praise specific things you think are smart can also give a lot of encouragement.</p>

<h2 id="technical-learnings">Technical Learnings</h2>

<h3 id="do-not-ever-drift-along-and-push-1st-draft-code-into-production">Do not ever drift along and push ‘1st draft’ code into production</h3>

<p>If I think about what’s gone well in the past year compared to what’s gone badly its when a “rough and ready” prototype has survived all the way into production, only to become a giant pain in the neck but increasingly hard to modify as customer data builds up.</p>

<p>The issue is basically down to not building a data model that makes sense and/or a set of abstractions that match the kind of behaviour you’re looking for your application. Why this happens tends to relate to:</p>
<ul>
  <li>timelines that don’t (seem to) give developers time to refactor and re-model code to make better,</li>
  <li>a lack of teamwork where no-one feels empowered to make sweeping changes so an inferior design persists,</li>
  <li>developers not understanding the product domain well enough.</li>
</ul>

<p>All you can do yourself is fight this if it happens - push back if necessary (every time I’ve done this business stakeholders have been totally happy) to give pauses in feature delivery to make tactical and thoughtful changes for a couple of weeks.  In your team be the change you want to see - try and build working relationships and a high trust environment (own up to mistakes, be friendly and share credit). For design work if no-one is stepping into that role - great that means you’re up and it’s the best way to learn. If your plans crash and burn at least you’ve learned something!</p>

<p>In my experience knowingly putting a design developers aren’t happy with in production is the worst way to tank team morale, delivery and trust with the rest of the business.</p>

<h3 id="time-saved-in-testing-is-paid-for-many-times-over">Time saved in testing is paid for many times over</h3>

<p>This one is pretty simple and kind of a no-brainer. Test as many paths as is practical, especially, especially the unhappy paths. Add good automated ‘integration tests’ that test flows as a whole from the perspective of the end-client (e.g. a mobile device) to see if the disparate parts of your application are well glued together. Sending silly mistakes into non-prod environments that need to be reverted just wastes time.</p>

<p>Never send code to production you haven’t given a manual once over in demo.</p>

<p>The other risk for you personally as a senior developer is that you are “on-call” as far as many non-developers in the business are concerned. For example even if a bug or issue in production originates in a part of an application you have no idea about, you’re the one who’s going to be contacted about it because people know who you are. This can be a real mental burden and result in excessive context switching and exhaustion. This is why it is vital and in your own personal interest to keep as many issues off production as you possibly can.</p>

<h3 id="overseeing-implementation-of-something-youve-designed-but-are-not-the-primary-implementer-for">Overseeing implementation of something you’ve designed, but are not the primary implementer for.</h3>

<p>The example: This year I designed an async process that was a version of the classic manager/worker pattern where a series of tasks happen and eventually some entity is pushed through a state machine. To ensure consistency each worked could only make one transactional write to the database after fetching some data or making a modification to a remote service.</p>

<p>This is something I’ve found difficult. At earlier stages of my career what I’ve done tended to be smaller bit of functionality of APIs with a different defined purpose and scope, but as I’ve become more senior the complexity and impact of work increases. What I’ve found works well</p>
<ul>
  <li>Sharing very high level designs and flows using diagrams and docs. There’s not too much point going into detail at this stage as everything is so likely to change.</li>
  <li>Making an initial implementation and personally creating the most crucial building blocks</li>
  <li>Then ASAP have another developer extend your system, or implement interfaces required by it and get honest feedback. This is so crucial it’s hard to overstate. Software is often worthless until someone else touches it. <em>No plan of software attack survives first contact with someone else</em> to paraphrase Von Moltke.</li>
  <li>Be vigilant but not overbearing at the review stage and ongoing monitoring.
    <ul>
      <li>At the review stage ensure the most fundamental parts of the design are being adhered to, but some freedom if it doesn’t affect the overall behaviour of the interface.</li>
      <li>Often a developer (usually senior) will not understand the design and do something that violates its purpose. A senior on the team then wrote code that mixed fetches from other services, and multiple transactions, missing that the point was to avoid a situation where one system is up, the other is down and we update data into an inconsistent state. Being a senior the more junior reviewer waved the change through (perhaps thinking <em>maybe they know something I don’t</em>).</li>
      <li>The issue here is that even if you document everything, explain it, there’s no guarantee that someone with too little time will come in and do something you don’t want. It’s your responsibility to check up and make sure you’ve done as much as you can to stop this happening.</li>
    </ul>
  </li>
  <li>Take criticism seriously but not personally. It’s extremely easy to criticise someone else’s code but this may or may not be useful criticism. It’s genuinely hard to take bad faith criticism from a colleague but try not to let it get to you. Some personal anecdotes
    <ul>
      <li><em>This system is too over-engineered and hard to use</em> - seems like good feedback, but really the developer didn’t fully understand the process and was just trying to slam some code in. Writing better documentation and personally explaining things helped here.</li>
      <li><em>This is too hard and time consuming to setup tests for</em>. Ding ding: this is a huge problem and requires immediate attention to resolve. You should under no circumstances be making it hard for developers to test, because this will hammer the test coverage of new code. Resolution: Implement and refactor test preparation to make setup easy and simple, for example using a test specific data model of your system’s entities.</li>
    </ul>
  </li>
</ul>

<h3 id="read-read-and-then-read-some-more">Read, read and then read some more</h3>

<p>I cannot overstate this enough. I would say that reading software and business books (even if tangentially related) is maybe not super exciting, but is maybe the best use of your time outside work. Once writing code is ‘easy’ the best way to upskill yourself is by reading well regarded software books. You don’t have to agree with everything these books contain, but should at least find something interesting in their pages. Some books I’ve read recently and enjoyed</p>
<ul>
  <li><em>Designing Data-Intensive Applications: Martin Kleppmann</em> (If you work with web applications you owe it to yourself to read this)</li>
  <li><em>Why Machines Learn: Anil Ananthawamy</em> (A segue to be sure but a clear and understandable dive into how machine learning actually works without getting lost in a sea of Python - quite Mathematical)</li>
  <li><em>A Philosophy of Software Design: John Ousterhout</em></li>
  <li><em>The Pragmatic Programmer</em> (Legendary book on “Blue Collar” coding)</li>
  <li><em>Everything is Predicable: Tom Chivers</em> (OK not at all related but a really readable fairly lightweight book on Bayesian statistics that I’d recommend to anyone)</li>
</ul>

<p><em>N.b. AI: I didn’t use AI to write this. So much intelligent stuff has been written about AI in software I don’t feel I have anything to add. I do feel though, for being creative, AI can hurt rather than help, as it (out of the box) tends to homogenise thought rather than let whatever you have that’s unique come out. For coding though it is obviously a productivity boon.</em></p>]]></content><author><name>Edmund Steele</name></author><category term="software" /><summary type="html"><![CDATA[In the past year I’ve become increasingly senior at my job, being pushed into more engagement with various stakeholders at a large, UK fintech. While earlier in my career I worked very closely with product managers and leadership at a much smaller company, there’s a world of difference to working with large teams who are extremely removed from software development.]]></summary></entry><entry><title type="html">Surprising problems with S3 and Java’s InputStream</title><link href="http://localhost:4000/software/2025/01/17/s3-java-footguns.html" rel="alternate" type="text/html" title="Surprising problems with S3 and Java’s InputStream" /><published>2025-01-17T18:00:18+00:00</published><updated>2025-01-17T18:00:18+00:00</updated><id>http://localhost:4000/software/2025/01/17/s3-java-footguns</id><content type="html" xml:base="http://localhost:4000/software/2025/01/17/s3-java-footguns.html"><![CDATA[<p>To begin with S3 is of course AWS’ object storage system that abstracts the underlying realities
of actually storing files into a (mostly) intuitive and easy to use API. It’s reliability and reach 
are truly staggering and it is one of the most impressive large scale software systems out there.</p>

<p>But it can go wrong - there are some behaviours that are unclear, confusing and difficult. 
This is a list mainly composed of painful lessons learned the hard - code that seems innocuous
but turns around to bite you when you least expect it. This is totally from the perspective of using 
the Java client SDK.</p>

<h2 id="inputstream-more-like-painpipe">InputStream (more like PainPipe)</h2>

<p>InputStreams are a fundamental abstraction for working with byte data with the JVM from the very 
outset of the platform and are deeply ingrained in all sorts of libraries. They are, it’s fair to say, 
ubiquitous.</p>

<p>With AWS S3 however the client gives you a nice Java bit of code like
<code class="language-plaintext highlighter-rouge">InputStream inputStream = s3Client.getObject(GetObjectRequest.builder().bucket("b").key("k").build())</code></p>

<p>Then a Java developer can see something like this and write some code like</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">try</span> <span class="o">(</span><span class="nc">InputStream</span> <span class="n">inputStream</span> <span class="o">=</span> <span class="n">s3Client</span><span class="o">.</span><span class="na">getObject</span><span class="o">(</span><span class="nc">GetObjectRequest</span><span class="o">.</span><span class="na">builder</span><span class="o">().</span><span class="na">bucket</span><span class="o">(</span><span class="s">"b"</span><span class="o">).</span><span class="na">key</span><span class="o">(</span><span class="s">"k"</span><span class="o">).</span><span class="na">build</span><span class="o">()))</span> <span class="o">{</span>
    <span class="kt">byte</span><span class="o">[]</span> <span class="n">buffer</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">byte</span><span class="o">[</span><span class="mi">1024</span><span class="o">];</span>
    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">length</span><span class="o">;</span> <span class="o">(</span><span class="n">length</span> <span class="o">=</span> <span class="n">inputStream</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="n">buffer</span><span class="o">))</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span> <span class="o">)</span> <span class="o">{</span>
        <span class="kt">byte</span><span class="o">[]</span> <span class="n">bytes</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">byte</span><span class="o">[</span><span class="n">length</span><span class="o">];</span>
        <span class="kt">var</span> <span class="n">string</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">String</span><span class="o">(</span><span class="n">bytes</span><span class="o">,</span> <span class="nc">StandardCharsets</span><span class="o">.</span><span class="na">UTF_8</span><span class="o">);</span>
        <span class="c1">// check something about the string</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">string</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="s">"something-we-dont-like"</span><span class="o">))</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="s">"Uh oh"</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">IOException</span> <span class="n">ioException</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="n">ioException</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>I’ve seen code like this in production environments and in an ordinary situation
in the JVM it is totally 100% OK. The <code class="language-plaintext highlighter-rouge">try()</code> <a href="https://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html">syntax</a>
gives a guarantee that the stream will be <em>closed</em>.</p>

<p>Another example here might be if JSON objects are being stored in S3 and read into memory - if the application
POJO ‘schema’ becomes incompatible with what’s stored in S3 then you’d see this a lot.</p>

<h3 id="what-is-wrong-with-this">What is wrong with this?</h3>

<p>The key is when the exception gets thrown.
S3 is a remote server with a connection managed by HTTP! The JVM can <em>close</em> your stream sure, but what happens
to the underlying connection? How does the multiple layers in technology know the connection is now severed? 
They don’t really. All that’s happened if some piped data is not being read anymore. Will it be read again soon? 
The actual HTTP connection has to wait for the default timeouts to expire before closing the connection.</p>

<p>It really can catch people out that <code class="language-plaintext highlighter-rouge">close</code> here <em>does not</em> mean closing the HTTP connection!</p>

<p>In a busy application then what can go badly wrong is a Java application might create a S3 client as a singleton 
with a fixed thread pool (say 50 or 100 threads). If these threads are all idling because of some nasty bug 
released in some code that parses S3 bytes then you can quickly get thread pool exhaustion, even if the 
code is ‘correct’ that throws the exception down the stack!</p>

<h3 id="what-could-be-done">What could be done?</h3>

<ol>
  <li>Call the <code class="language-plaintext highlighter-rouge">abort()</code> method on <code class="language-plaintext highlighter-rouge">ResponseInputStream</code></li>
  <li>Write all data to RAM or disk everytime</li>
  <li>Do not throw when processing S3 input streams.</li>
</ol>

<p>There’s no perfect solution in my opinion.</p>

<p>For 1) the issue is you can get some messy code e.g. in that example I showed earlier say I add an abort like so</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="o">(</span><span class="n">string</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="s">"something-we-dont-like"</span><span class="o">))</span> <span class="o">{</span>
    <span class="n">inputStream</span><span class="o">.</span><span class="na">abort</span><span class="o">();</span>
    <span class="k">throw</span> <span class="k">new</span> <span class="nf">AnImportantException</span><span class="o">(</span><span class="s">"Uh oh"</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>In <em>most</em> cases this should be fine, but have to be aware that the <code class="language-plaintext highlighter-rouge">abort</code> is itself of course having to 
manage the underlying HTTP connection. There’s a lot of moving parts there and they can and will. 
This means the exception (or just anything) in the next line isn’t <em>guaranteed</em> to throw, which can 
introduce regressions in some code bases.</p>

<p>The other subtler issue is slight vendor lock in. In theory the beauty of using a system like S3 is 
allowing developers to insulate themselves from the harsh reality of actually putting things onto a disk,
and this level of specificity to AWS’ system is perhaps replacing one form of “essential knowledge” (how 
a disk works) with another “AWS internals”. When you write Java code like this you would no longer be
passing around the widely accepted <code class="language-plaintext highlighter-rouge">InputStream</code> into your applications you’d be passing an AWS interface
with special error handling rules.</p>

<p>For 2) this is probably the best outcome. If you’re just piping to RAM or disk then there’s far less chance anything
can go wrong when downloading the data, meaning shorter connections. There will be issues with risk around
OOMing your application or running out of disk space (probably why <code class="language-plaintext highlighter-rouge">InputSteam</code> downloads were used in 
the first place) but the trade-off is worth it in my opinion. How much does adding disk space or even RAM
add to running an application? <em>Is it more or less than the salary-time it takes for someone in management 
to share their screen in an all hands?</em></p>

<p>For 3) it is so absurd to talk about, I only included to hit the “rule-of-3” in rhetoric.</p>]]></content><author><name>Edmund Steele</name></author><category term="software" /><summary type="html"><![CDATA[To begin with S3 is of course AWS’ object storage system that abstracts the underlying realities of actually storing files into a (mostly) intuitive and easy to use API. It’s reliability and reach are truly staggering and it is one of the most impressive large scale software systems out there.]]></summary></entry><entry><title type="html">My favourite 5 Books I’ve read in 2024</title><link href="http://localhost:4000/life/2024/12/21/books-of-the-year.html" rel="alternate" type="text/html" title="My favourite 5 Books I’ve read in 2024" /><published>2024-12-21T18:00:18+00:00</published><updated>2024-12-21T18:00:18+00:00</updated><id>http://localhost:4000/life/2024/12/21/books-of-the-year</id><content type="html" xml:base="http://localhost:4000/life/2024/12/21/books-of-the-year.html"><![CDATA[<p>To be clear these are not books published in 2024, just one’s that I have read this year.</p>

<h2 id="5-fermats-last-theorem---simon-singh">5) Fermat’s Last Theorem - Simon Singh</h2>

<p>This book is pretty much the gold standard for all popular science writing and definitely the most engaging book written on number theorists ever. I’m amazed it’s taken me so long to get around to reading it. It concerns the long journey to understand a childishly simple conjecture - is there a value <em>n</em> were a^n+ b^n = c^n - i.e. if you take some number n - say 511 are there three other different whole numbers where this equation holds?</p>

<p>Despite number theory - i.e. the mathematics of ‘whole numbers’ and how they relate (think Prime Numbers, whole number sequences etc.) being one of the least obviously applicable to the ‘real world’ the author does an absolutely sublime job in bringing the subject to life.</p>

<p>Where this book is above and beyond its peers is that it’s all too common for PopSci to become an extended summary of research or individuals and you lose sense of <em>why</em> the work is important and the context around it. There’s an excellent explanation of what Mathematical proofs really are - i.e. knowing that some numeric logic is <em>true or false</em> and the history and evolution of proofs throughout time. We even get a brilliant section of Godel and the limits of what its even possible for mathematics to do.</p>

<p>Other than that the prose is highly engaging, funny at times and deeply readable with enough depth that even people with good mathematical knowledge would find it fun to read, while bringing along those who maybe only took a GCSE.</p>

<h2 id="4-the-dark-forest---cixin-liu">4) The Dark Forest - Cixin Liu</h2>

<p>This is Book 2 in the ‘Three Body Problem” series by Cixin Liu (or Liu Cixin, or just “Big Liu” idk) now being adapted by Netflix. For me it was my favourite. Book 1 is the most grounded in the real world, Book 3 disappears into utterly speculative fiction whereas this book stays as a description of plausible future societies and events. They’re all good but this book landed the hardest even though it is probably the most GrimDark version of the universe I’ve ever read. (Spoilers; The reason the universe looks dead is because any civilization that makes a ‘sound’ is immediately wiped out).</p>

<p>In summary the plot concerns humanity’s attempts to survive in the face of impending conquest by a more technologically advanced civilisation. There’s repeated references to 19th and 20th century China’s failure to adapt and survive to a world where it was no longer the most powerful country, which for a Western reader added an interesting cultural dimension to the novel. Interesting as well that Cixin Liu never makes moral statements, just takes a quite macho line that humanity needs to be stronger to survive. It is also so macho it becomes a little misogynist at times - good luck Netflix in the adaptation!</p>

<h2 id="3-the-meat-paradox---rob-percevil">3) The Meat Paradox - Rob Percevil</h2>

<p>An actually good and interesting book about the Meat/Veganism/Climate apocalypse debate. Without blame or name calling the author takes a look at humanity’s relationship with meat from hunter-gatherer societies to the present day. There aren’t really any easy answers, but squeamishness around eating meat appears to have followed us from our earliest evolutionary history. In a way this makes sense - we are social creatures and if we have empathy for one another it makes sense we have empathy with those “like us”.</p>

<p>It also refuses to sweep under the rug the health benefits many people have (me included) from eating meat (I’ve tried just eating only veg and I get ill the whole time), as well as the challenge of “Big Tech” solutions not providing nutrition.</p>

<h2 id="2-orbital---samantha-harvey">2) Orbital - Samantha Harvey</h2>

<p>An absolutely beautiful novel about life on earth when pushed into the harsh extremes of the International Space Station. The idea of a spaceship as an extended allegory for the earth is not new, it dates back to the 1970s with the first full colour images of earth taken by the Apollo Moon missions, but this is one of the most subtle and profound takes on the subject matter. It’s also refreshing to be reminded of just how amazing the ISS is in many ways - a population of humans living beyond our atmosphere, and how mundane most of what astronauts actually do is. The metaphor which is reinforced by descriptions of a giant Typhoon - is that we need to treat Earth like living in a spaceship (i.e. with great care) because we really are floating in space. The novel makes this much more profound than I’ve done!</p>

<p>That being said there’s no real plot as the novel just describes a few ‘days’ onboard the ISS and nothing dramatic or exciting happens but the writing and characterisation is so strong it holds it all together.</p>

<h2 id="1-the-player-of-games---iain-m-banks">1) The Player Of Games - Iain M Banks</h2>

<p>Space Operas may be immature but they are an absolute delight to read. No need to explain how ‘hyperdrives’ work, how these bizarre civilisations actually function, why there are always sexy cat ladies, just pure adventure.</p>

<p>This novel, book two in the “Culture” series has the best player of board and strategy games in the galaxy take on a special request to compete in a game series an empire of aliens use to select their leader. Essentially everyone (or at least lots of people) in a space empire plays a massively complex strategy against each other until finally one emerges as their emperor. It is totally silly when you explain it but the novel pulls it off.</p>

<p>I’ve said it before and I’ll say it again, playing games is a great way to understand someone’s personality - do they make bold moves and hope for the best? Turtle and try and stockpile? Make alliances? And in some ways this book is like a love letter to strategy wargaming (Yes I’m cool). The ‘lore’ in describing a future society (The Culture) watched over by superintelligent computers focussed on maximising human happiness and how it interacts with a ‘barbaric’ expansionist empire is fascinating. What’s acceptable to do to try and help such a society develop given a direct approach will antagonise the population? What role do humans play in events if Super-AI is orders of magnitude more intelligent? Would a Super-AI experience the real world more like a game with (with enough intelligence) seeing predictable patterns driving behaviour where we see chaos?</p>

<p>It also includes may favourite use of pathetic fallacy maybe ever where the most dramatic and climatic board game showdown literally happens at the same time as a continent sized firestorm is approaching towards the arena. Talk about upping the stakes!</p>]]></content><author><name>Edmund Steele</name></author><category term="life" /><summary type="html"><![CDATA[To be clear these are not books published in 2024, just one’s that I have read this year.]]></summary></entry><entry><title type="html">Tokyo and Kamakura</title><link href="http://localhost:4000/japan/2024/11/08/tokyo-kamahura.html" rel="alternate" type="text/html" title="Tokyo and Kamakura" /><published>2024-11-08T18:41:18+00:00</published><updated>2024-11-08T18:41:18+00:00</updated><id>http://localhost:4000/japan/2024/11/08/tokyo-kamahura</id><content type="html" xml:base="http://localhost:4000/japan/2024/11/08/tokyo-kamahura.html"><![CDATA[<p>I was unsure about doing a final entry in this series as what else could possibly be said or written about Tokyo? Even without knowing where these places are scenes like the ‘Shibuya scramble’, the Tokyo Sky Tower and the general manic-ness of central Tokyo are so well known it feels like unnecessary to rehash. So this is going to be essentially just things I noticed, or reflect the city as it is most of the time. I also went to Kamakura which was more generically photogenic so that’s more standard tourist snaps.</p>

<h2 id="tokyo-second-impressions">Tokyo (second) Impressions</h2>

<p>My first visit to Tokyo was technically the first day of the holiday, but I didn’t stay very long - mainly just looking around the neighbourhood around ‘Shinjuku’ one of Tokyo’s main train stations. The first time getting metro trains and using JR rail was a bewildering and confusing experience (make sure you a. use the right machine, b. buy a paper ticket AND scan your travel card), the second easier. 
I actually got a little kick out of confidently striding through train stations in Tokyo like a terminator sent from the future.</p>

<p>Tokyo was easily my favourite city to visit in Japan and one of the most exciting and stimulating places I’ve ever visited. There’s a certain manic energy to the place - something about the ultra-white lighting in the train network, the constant frenetic jingles that play in shops and just the ceaseless purposefulness of the people going about their lives.</p>

<p><img src="https://storage.googleapis.com/images-for-blog-ad4ea432-25af-4ea4-8d4b-58ea84408c68/photo-backups/tokyo-kamakura/tokyo-actual.jpeg" alt="TokyoAsItIs" /></p>

<p>I also didn’t really do many of the “must see” destinations in Tokyo. I went to the National Art Museum which was sublime and the photography gallery (where they asked if I were a student!). The one I did see was Senso-Ji which was … not a nice experience. 
I’m not bad with crowds in the least but there’s something about a tourist crush that hits differently. When I went there was a Buddhist ceremony happening so the noise was Buddhist chanting, the constant sound of coins being thrown as offerings and a babble of dozens of different languages - just a disorienting sensory overload. I guess this put me off the tourist trail a little.</p>

<p>I saw this cool crow in the grounds building a nest</p>

<p><img src="https://storage.googleapis.com/images-for-blog-ad4ea432-25af-4ea4-8d4b-58ea84408c68/photo-backups/tokyo-kamakura/tokyo-crow.jpeg" alt="Raven" /></p>

<p>Other than that the Imperial Palace grounds are a nice walk especially given their contrast with the incredibly built up surroundings of central Tokyo. 
<img src="https://storage.googleapis.com/images-for-blog-ad4ea432-25af-4ea4-8d4b-58ea84408c68/photo-backups/tokyo-kamakura/tokyo-side-bt-side.jpeg" alt="ImpPalace" /></p>

<p>The other thing I found hilarious was the “smoking cage” - smokers even in public parks are not allowed to smoke anywhere they like and have to go into special “smoking zones”.</p>

<p><img src="https://storage.googleapis.com/images-for-blog-ad4ea432-25af-4ea4-8d4b-58ea84408c68/photo-backups/tokyo-kamakura/smoking-cage.jpeg" alt="SmokingZone" /></p>

<p>I think my favourite neighbourhood - if for the culture shock element if nothing else - was the <em>Akihabra</em> district. The history is this started during the occupation of Japan as a place where “acquired” American radios were sold and tinkered with. 
It’s still billed in some websites as a place where you can get cutting edge tech but this wasn’t really the case in my experience. What parts of it are are almost an open technology museum. I saw vintage vacuum tubes (transistors are overrated), telegraph machines(!) and all sorts of electric circuitry. So this is the place if you actually want to build your own ham radio or tinker with low level components! I saw some enterprising people branching out for the tourist bucks by selling lego contraptions and the like.</p>

<p><img src="https://storage.googleapis.com/images-for-blog-ad4ea432-25af-4ea4-8d4b-58ea84408c68/photo-backups/tokyo-kamakura/akihabra-lower-res.jpeg" alt="Akiroundup" /></p>

<p>The other side of the Akihabra coin are the “Maids”. I as usual basically did no research so I had absolutely no idea what the deal with these girls are. In the main street about every few meters they’ll be a usually young and pretty girl wearing some ‘sexy’ maid outfit holding a sign. I had no idea what was going on here … I thought for a second it might be prostitution but brushed that aside immediately, then thought maybe it was just trying to get nerdy guys into shops to buy stuff. 
I was far too confused out to engage but what it actually is are these role play cafes where the girls pretend to be maids, serve you saccharine cakes/drinks, chat a bit then you leave. Actually fairly innocent but my word if this were ever tried in the UK/West would it create a holy war between sex-positive and sex-negative feminism.</p>

<h2 id="kamakura">Kamakura</h2>

<p>Kamakura was awesome. I was absolutely exhausted at this point in the trip and almost didn’t go, but I was really glad I made the trip. It’s basically a smaller town about 1hr south of Tokyo on the coast that has many old temples and gardens. I stayed overnight which allowed seeing some of the sites early which was ideal as this place is extremely popular (for good reason) with day trippers.</p>

<p>There’s no secrets and surprises vs what a 5 minute google or LLM query will tell you but I’d really recommend “Sugimoto” temple. In comparison to the others it was basically deserted while being stunningly beautiful in a more rustic, less showy way than the others.</p>

<p><img src="https://storage.googleapis.com/images-for-blog-ad4ea432-25af-4ea4-8d4b-58ea84408c68/photo-backups/tokyo-kamakura/mossy-steps.jpeg" alt="MossyStepsStill" /></p>

<p>A Video of the same spot</p>

<p><img src="https://storage.googleapis.com/images-for-blog-ad4ea432-25af-4ea4-8d4b-58ea84408c68/photo-backups/tokyo-kamakura/mossy-steps.mov" alt="MossyVideo" /></p>

<p>Other than that it was a nice town to explore on foot or bike.</p>

<p><img src="https://storage.googleapis.com/images-for-blog-ad4ea432-25af-4ea4-8d4b-58ea84408c68/photo-backups/tokyo-kamakura/kamakura-rail.jpeg" alt="KamakuraRail" /></p>

<p>And the main temples are popular for a good reason. Check out the flawless “rule of thirds” execution on the tiering of these temples.</p>

<p><img src="https://storage.googleapis.com/images-for-blog-ad4ea432-25af-4ea4-8d4b-58ea84408c68/photo-backups/tokyo-kamakura/kamajura-temples.jpeg" alt="TempleRuleOfThirds" /></p>

<h2 id="tokyo-by-night">Tokyo By Night</h2>

<p>Chronologically I returned to Tokyo for one last night before my flight and had a walk around Shinjuku (Midnight diner gang represent). I was really surprised at just how touristic this area was, for example the “Golden Gai” (#4 must see before you die!) was literally entirely tourists mainly from the USA, China, Korea, Europe and India roughly in that order. 
City tourism is great in so many ways but the flipside is that for Japanese commuters there isn’t really an affordable place to grab a quick dinner/drink before heading home. We’re on a slippery slope even in London with this but imagine if all the places to eat near King’s Cross or Victoria were £25 for a sandwich, pints were £15 and everyone there was a tourist. It’d feel a bit weird right?</p>

<p>Anyway hang wringing over I tried to find some people to drink with but again the people at my hostel were nowhere to be found so I just did some night photography.</p>

<p>It’s a common refrain but it really is true that Tokyo at night really is another city. You’re basically getting two for the price of one!</p>

<p>Oh no - its not … 
<img src="https://storage.googleapis.com/images-for-blog-ad4ea432-25af-4ea4-8d4b-58ea84408c68/photo-backups/tokyo-kamakura/whats-that.jpeg" alt="Monster" /></p>

<p>It’s Godzilla! Everyone run! 
<img src="https://storage.googleapis.com/images-for-blog-ad4ea432-25af-4ea4-8d4b-58ea84408c68/photo-backups/tokyo-kamakura/gojira.jpeg" alt="Gojira" /></p>

<p>Behind the scenes with this next photo is to get the blur I had use a longer shutter speed I needed to stabalise the camera. So I squatted down next to a railing which I used to support the camera otherwise the involuntary movement of my hands would blur the photo.</p>

<p>It took a few attempts but while I was doing in a couple of taxis pulled up right in front of the camera. The first one this Japanese dude got out saw me with the camera then was like “Komenasai” 🙏 and ducked out of the frame ASAP (I tried to say don’t worry etc.). The second taxi these American guys rolled in, tried to pay the taxi driver with “venmo” (?) and had a bizarre argument, while I was chilling there like jeez I’ve lined up this shot for NOTHING. The hardships of a cool and trendy street photographer I guess. Anyway I got bored and went to bed.</p>

<p><img src="https://storage.googleapis.com/images-for-blog-ad4ea432-25af-4ea4-8d4b-58ea84408c68/photo-backups/tokyo-kamakura/shinjuku.jpeg" alt="ShinJuku" /></p>

<p>That’s it.</p>

<p>おやすみ!</p>

<p><img src="https://storage.googleapis.com/images-for-blog-ad4ea432-25af-4ea4-8d4b-58ea84408c68/photo-backups/tokyo-kamakura/tokyo-moon.jpeg" alt="Moon" /></p>]]></content><author><name>Edmund Steele</name></author><category term="japan" /><summary type="html"><![CDATA[I was unsure about doing a final entry in this series as what else could possibly be said or written about Tokyo? Even without knowing where these places are scenes like the ‘Shibuya scramble’, the Tokyo Sky Tower and the general manic-ness of central Tokyo are so well known it feels like unnecessary to rehash. So this is going to be essentially just things I noticed, or reflect the city as it is most of the time. I also went to Kamakura which was more generically photogenic so that’s more standard tourist snaps.]]></summary></entry><entry><title type="html">Western Japan - Onomichi and Shikoku</title><link href="http://localhost:4000/japan/2024/10/30/western-japan.html" rel="alternate" type="text/html" title="Western Japan - Onomichi and Shikoku" /><published>2024-10-30T18:41:18+00:00</published><updated>2024-10-30T18:41:18+00:00</updated><id>http://localhost:4000/japan/2024/10/30/western-japan</id><content type="html" xml:base="http://localhost:4000/japan/2024/10/30/western-japan.html"><![CDATA[<h2 id="omonichi">Omonichi</h2>

<p>My main reason for visiting this town was to do the ‘Shimanami kaido’ a fun cycling route that links together the mainland of Honshu with the smaller and much more rural island of Shikoku. I’d say as a single activity this was the highlight of my holiday. Its hard really to overstate how awesome and how right up my street it was. You basically cycle through beautiful fishing villages and docks across these improbably massive suspension bridges. Onomichi is beautiful enough as is and I had probably my best Ramen experience in Japan here - the food was great and it was first place I was able to sound out a menu item by reading the Hiragan aloud. I was absolutely buzzing from that and the “Ramen Master” seemed genuinely happy a tourist said something in Japanese.</p>

<p>On a side note the handwritten menus are something I love about Japanese restaurants - they presumably are 
there because they chef just makes whatever they have ingredients before on a bit of a rota, the food is low-cost with 
no frills. I <em>wish</em> we had more dining options for healthier fast food that’s casual and friendly for eating alone, just somewhere between 
Maccies and an actual restaurant.</p>

<p><img src="https://storage.googleapis.com/images-for-blog-ad4ea432-25af-4ea4-8d4b-58ea84408c68/photo-backups/west-japan/onomichi-ramen.jpeg" alt="Ramen" /></p>

<p>The town itself is nice in and of itself although I didn’t spend that much time here</p>

<p><img src="https://storage.googleapis.com/images-for-blog-ad4ea432-25af-4ea4-8d4b-58ea84408c68/photo-backups/west-japan/onomichi.jpeg" alt="Onomichi" /></p>

<p>Am I in Venice?
<img src="https://storage.googleapis.com/images-for-blog-ad4ea432-25af-4ea4-8d4b-58ea84408c68/photo-backups/west-japan/canal.jpeg" alt="Canal" /></p>

<h4 id="aside-japanese-economic-history">Aside: Japanese Economic History</h4>

<p>This is the one of the most visible symbols in Japan of the dangers of over building infrastructure - as so much of the economy and employment of Japan is taken up in construction which boomed during Japan’s postwar economic miracle the government wanted (or due to cronyisnm) to keep the gravy train rolling. At this point Shikoku already has a great road and rail bridge to its most densely populated region in Kagawa province. The economic case for building another set of extremely expensive road only bridges isn’t that strong.
 The case against is basically</p>
<ul>
  <li>Massive upfront capital investment that may have more efficient uses (even tax cuts in some circumstances that allow people to spend where they feel it improves their lives best)</li>
  <li>The big one: the upkeep bill which always dwarves the initial cost of construction. If the economic growth in the regions is less than the cost of maintenance then you’ve got a white elephant.</li>
</ul>

<p>So in some ways the ‘point’ of the <em>Shimano kaido</em> is to get <em>someone</em> to use these damn bridges and bring some tourist investment to the area! And I’m all for it. In some ways the engineering <em>was</em> the touristic experience - the staggering scale and majesty of these basically empty bridges is staggering. That there’s just one of these after another after another defies belief. Hats off to Japan in the 1990s - you had an ambition and belief in progress we seem to have lost a little in the UK.</p>

<p><img src="https://storage.googleapis.com/images-for-blog-ad4ea432-25af-4ea4-8d4b-58ea84408c68/photo-backups/west-japan/big-bridges.jpeg" alt="BigBridgeLittleCar" /></p>

<h2 id="shimmy-shimano-kaido">Shimmy Shimano kaido</h2>

<p>OK it’s the <code class="language-plaintext highlighter-rouge">Shimanami kaido</code> but it sounds kind of similar to the bike brake system <code class="language-plaintext highlighter-rouge">Shimano</code> so my brain kept correcting it. 
There’s not much more to say so here’s some photos</p>

<p><img src="https://storage.googleapis.com/images-for-blog-ad4ea432-25af-4ea4-8d4b-58ea84408c68/photo-backups/west-japan/paraiso-2.jpeg" alt="Islands" />
<img src="https://storage.googleapis.com/images-for-blog-ad4ea432-25af-4ea4-8d4b-58ea84408c68/photo-backups/west-japan/pano-shimano.jpeg" alt="Panorama" /></p>

<p>There were even purpose built ramps up to the bridges!
<img src="https://storage.googleapis.com/images-for-blog-ad4ea432-25af-4ea4-8d4b-58ea84408c68/photo-backups/west-japan/ramp-timelapse.mov" alt="BridgeRamp" /></p>

<h2 id="kagawa-prefecture-takamtsu">Kagawa Prefecture: Takamtsu</h2>

<p>Takamatsu was a wonderful surprise - I only really saw it as a pit stop on the way to the “Iya Valley” which I’d seen online and looked really cool. There’s nothing too amazing about this place in and of itself but from Japanese people I’d heard things about the “Sanuki Udon” Buckwheat noodle dishes in this part of Japan. I loved these noodles - they’re basically big, extra chunky noodles in rich meaty broths. 
Just gooey carby deliciousness in a bowl - their Chinese cousins Xi’an style noodles also have a special place in my heart because I used to get them relatively often when I lived with my brother over the long periods of lockdown as a pick me up.</p>

<p>As for an actual tourist attraction the only place I really went to was the “Ritsurin Koen” garden - absolutely beautiful and a place that really speaks to the peaceful serenity (and inequality) of the Edo feudal era.</p>

<p><img src="https://storage.googleapis.com/images-for-blog-ad4ea432-25af-4ea4-8d4b-58ea84408c68/photo-backups/west-japan/Takamatsu.jpeg" alt="TakamatsuGarden" /></p>

<h3 id="cross-country-to-the-south-coast">Cross Country to the South Coast</h3>

<p>From here things really started to unravel a little. Really I have no-one to blame but myself - I just tried to cram <em>way</em> too much in. I should really have picked a base, probably either Takamtsu or Kochi and done day trips, or just planned a little better. Basically as a estimate for about 3 days I spent probably an equal amount of time travelling as I did actually doing touristic activities.</p>

<p><img src="https://storage.googleapis.com/images-for-blog-ad4ea432-25af-4ea4-8d4b-58ea84408c68/photo-backups/west-japan/shikoku-train.jpeg" alt="AverageTrainRide" /></p>

<p>Japan has wonderful public transport, Shikoku’s is still OK … but it is fundamentally an extremely rural area. What I was doing was a little mad - basically trying to get to one of the most rural and inaccessible parts of Japan for effectively a day trip. Mad. It <em>did</em> work and I <em>did</em> get some good photos … but man I should have budgeted more time for this place or just cut part of the trip.</p>

<p><img src="https://storage.googleapis.com/images-for-blog-ad4ea432-25af-4ea4-8d4b-58ea84408c68/photo-backups/west-japan/shikoku-population.png" alt="PopulationDensity" /></p>

<p><img src="https://storage.googleapis.com/images-for-blog-ad4ea432-25af-4ea4-8d4b-58ea84408c68/photo-backups/west-japan/shikoku-tea.jpeg" alt="Teagrowing" /></p>

<p>So the guesthouse I was staying at in the middle of nowhere basically had no food nearby so I had boil in the bag noodles for dinner and breakfast, I was a little cold, starting to feel quite homesick and lonely having not really had a long conversation for a couple of days at this point. I think it was at this point it kind of twigged that this was a holiday from work - not some kind of mad experience accumulation trip. So instead of dashing off on some expedition I just hired a bike then cycled to a river and chilled out. I don’t know if it was exhaustion or some kind of Shinto mindfullness but I did just sit next to a river in the sun for like an hour just existing.</p>

<p><img src="https://storage.googleapis.com/images-for-blog-ad4ea432-25af-4ea4-8d4b-58ea84408c68/photo-backups/west-japan/shikoku-sign.jpeg" alt="overgrown" /></p>

<p>My reverie was broken abruptly when my phone pinged me (IIRC)</p>

<blockquote>
  <p>Your flight departs Kochi Airport for Tokyo in 2 hours, checkin closed!</p>
</blockquote>

<p>Yabaie! I had somehow booked my flight on the wrong day - perhaps related to the timezone on the app I was using? Again no-one to blame but myself but damn…</p>

<p>No worries I thought. I can still get a bus to Osaka or Okayama then ride the Shinkansen back to Tokyo. After all its just money, fortunately I could afford it. I then decided to check my hotel in Kochi (which I was still interested in seeing) and saw that (thanks Booking) it was actually about 20km outside accessible only through busses. Yay. At this point I should have just cut my losses - gone back to Takamatsu, grabbed any hotel I could then gone back on the next day.</p>

<p>A strange abandoned tourist attraction?
<img src="https://storage.googleapis.com/images-for-blog-ad4ea432-25af-4ea4-8d4b-58ea84408c68/photo-backups/west-japan/shikoku-mine.jpeg" alt="AbandonedPlace" /></p>

<p>Instead I was like “whatever” I’ve got time I’ll just sit on the busses. So I got up, found the cafe I wanted to visit, and probably the nicest cafe lunch I’d had in Japan with some of the kindest people - an old couple running a takeaway cafe in their village with locally produced ingredients and home cooking. The old lady even showed be making an offering to their Inari, which I totally humiliated myself by thinking she was offering buckwheat when it was really some other type of grass which they got a good chuckle out of.</p>

<p><img src="https://storage.googleapis.com/images-for-blog-ad4ea432-25af-4ea4-8d4b-58ea84408c68/photo-backups/west-japan/delicious-meal.jpeg" alt="Lunch" /></p>

<p>So I pedalled back to the train, got to Kochi then tried to get to the hostel. The hostel owner was just unbelievably friendly and helpful - texting me and helping out with which bus to take, where to go etc. Unfortunately busses aren’t numbered and only have the Kanji of the end destination which, in my defence, is extremely confusing. Essentially I got on totally the wrong bus - the bus driver questioned where I was going then was like “Ie Ie, Kocchi (no no this way) -&gt;” pointing at some bus station (and not charging) then saying to go and ask the people inside for help. Which I did to the best of my ability I basically said</p>

<blockquote>
  <p>Me: Where village bus is?</p>

  <p>Ticket Person: What ??? I don’t understand</p>

  <p>Village … please ?</p>

  <p>…</p>

  <p>Excuse me, I’m sorry 
…</p>
</blockquote>

<p>I know I probably “did something wrong” but I’m sorry if you work in a bus station, and someone asks about a place what the hell do you think they are asking for? She knew, she was just being deliberately obstructive. I was stressed and a bit cranky which didn’t help but WTF was her problem? Just couldn’t be arsed I guess.</p>

<p>Anyway I figured out a route and managed to make it to the hostel but arrived long into the night, tired, hungry and about 2 hours late. I’m not ashamed to say that walking along the path of some fishing village and feeling the briny breeze and seaside smell of rotting kelp I was reminded of seaside holidays at home and I sat on the breakwater and had a little cry by myself in the dark. Not that I was sad or anything, just had to let something out. Fortunately the hostel owner was just the sweetest person, really friendly and kind. She even offered to drive me to the supermarket where I got some stir fry, salad and ice-cream and had a nice little meal using their microwave. The incredibly friendly shop counter guy may have thought we had a conversation but to this day I have no idea what he was talking about or why he thought I could speak Japanese, I was just nodding at appropriate times and smiling. He probably appreciated the company.</p>

<p>The next day started pretty well, I had a tasty breakfast of a seaweed rice ball then set off for Kochi. I’d fixed my route - there was a coach from Kochi (ahey) back to Okayama on the Shinkansen which would get me back to Tokyo (very expensively) on the same day. From there it all went downhill. I waited for the first bus, then waited some more, then some more, then the next busses supposed departure came and went then I started to stress. I was literally in the middle of nowhere, I didn’t know how to get a taxi or really how to get out easily. Instead I decided to hoof it overland to the next train station - about a 3 hour walk.</p>

<p><img src="https://storage.googleapis.com/images-for-blog-ad4ea432-25af-4ea4-8d4b-58ea84408c68/photo-backups/west-japan/neko.jpeg" alt="NekoCar" /></p>

<p>This is going to sound weird but a long country walk where you don’t want to do it, and its just an inconvenience hits totally different to a hike. In theory they’re both just nice long walks and there were literally tourists LARPing as pilgrims doing the same walk I was just so angry at myself for cocking this up as much as I had done. I think hitchhiking is illegal in Japan so I just walked. In some ways I’m glad I did because I saw non picturesque rural Japan and … it kind of sucks? 
It really did not feel like a wealthy place at all, perhaps a healthy and happy one but the houses were small and poor quality - lots of small scale labour intensive farming with the landscape churned up by ugly pavementless roads and tunnels. 
I’m not trying to be mean just understanding that actually its not that nice in the countryside to actually live - there’s lots of good reasons young people leave for the cities.</p>

<p>Still when I finally made it to the train station, sweaty and gross, and the train came and I arrived in Kochi I finally relaxed. There was a cool Sunday market which I just made to the end of where I got a nice cooking knife and some Matcha Tea Ice Cream and saw Kochi’s beautiful castle and gardens.</p>

<p><em>Aside: I learnt the morpheme for tea and think its really pretty</em></p>
<h1 id="茶-cha">茶 (cha)</h1>

<p>I worked out I’d spent about 8hrs travelling to get to Kochi and about 2 hours actually seeing the town. Leaving the place in probably the comfiest coach journey I’d ever taken (the driver even whispered the announcements to not disturb people!) I was just relieved.</p>

<p>Shikoku was probably the most min-maxed holiday I’ve ever had in my life. Elegiac wonder to depression with no in-between.</p>

<p>I’d definitely recommend it for hiking, cycling and sports and it was close to my favourite place to visit at its best but</p>
<ul>
  <li>Allow for a longer visit</li>
  <li>Hire a car</li>
</ul>

<p><img src="https://storage.googleapis.com/images-for-blog-ad4ea432-25af-4ea4-8d4b-58ea84408c68/photo-backups/west-japan/lying-flat-beach.jpeg" alt="LyingFlat" /></p>

<h3 id="musing">Musing</h3>

<p>I read somewhere that a tourist is defined as being someone “who travels to experience a change”. In that way 
I think Shikoku provided that for me. Its a bit odd in some ways to travel by yourself and I’m definitely feeling the 
terrifying progression of time and not really being young anymore. I actually think taking time to pause and reflect
while doing something totally out of the ordinary is a wonderful thing, and may even be the best thing about living
in a wealthy country for me.</p>

<p>Sleepy me except its dark and moody
<img src="https://storage.googleapis.com/images-for-blog-ad4ea432-25af-4ea4-8d4b-58ea84408c68/photo-backups/west-japan/tired-me.jpeg" alt="TiredMe" /></p>]]></content><author><name>Edmund Steele</name></author><category term="japan" /><summary type="html"><![CDATA[Omonichi]]></summary></entry><entry><title type="html">Central Japan: Nagoya, Kyoto and Osaka</title><link href="http://localhost:4000/japan/2024/10/29/central-japan.html" rel="alternate" type="text/html" title="Central Japan: Nagoya, Kyoto and Osaka" /><published>2024-10-29T18:41:18+00:00</published><updated>2024-10-29T18:41:18+00:00</updated><id>http://localhost:4000/japan/2024/10/29/central-japan</id><content type="html" xml:base="http://localhost:4000/japan/2024/10/29/central-japan.html"><![CDATA[<h2 id="nagoya-is-not-boring">Nagoya (is not boring)</h2>

<p>For most people Nagoya is a station you pass through on the way between Tokyo and Kyoto, which is unfortunate because its actually quite nice. I wouldn’t go further than that - its like a cleaner, safer and more pleasant Birmingham. There’s not that much that you must do here, not really many historical sites or Instagramable photos. Though the castle is quite beautiful, but like many in Japan is a replica as the original was destroyed in an uprising in the 17th century against the Tokugawa. Wood and warfare don’t tend to mix very well.</p>

<p><img src="https://storage.googleapis.com/images-for-blog-ad4ea432-25af-4ea4-8d4b-58ea84408c68/photo-backups/central-japan/nagoya-castle-2.jpeg" alt="NagoyaCastle" /></p>

<p>For me the nicest thing was experiencing an everyday large Japanese city which receives very little tourism - even in such a big city you’d still get children staring because they see so few non-Japanese people then a very cute interaction of saying Konnichiwa to each other.</p>

<p>The Toyota museum in the center of town was a really cool industrial history museum that’s worth checking out if you’re into engineering. Interestingly the museum was financed by the Toyota corporation so is essentially a propaganda/advertising piece. This meant most of the stuff you’d expect to find in a British museum about the downsides of industrialisation, the condition of the workers etc. was totally absent. It was just a parade of the impressive machines Toyota had built on their rise to global automotive dominance. There’s also a neat transport museum - its not <em>amazing</em> but worth checking out to learn more about the Shinkansen network.</p>

<p><img src="https://storage.googleapis.com/images-for-blog-ad4ea432-25af-4ea4-8d4b-58ea84408c68/photo-backups/central-japan/Shinkansen.jpeg" alt="Shinkansen" /></p>

<p>It was also quite fun walking around at night taking photos - there was also a national holiday the next day so there was a lively nighttime atmosphere for young Japanese people were out having fun.</p>

<h2 id="kyoto-is-not-overtouristed">Kyoto (is (not) overtouristed)</h2>

<p>I slightly insanely only did a day trip to Kyoto which was mad because of how much stuff there was to see there, and how beautiful huge sections of the city were. I think I got put off by people saying how overtouristed and unpleasant it could be - but on the scale of a historic European city within 50km of an international airport it was nothing. The sites are ticketed often with timed entry so didn’t feel busy - the busses were a great way to get around but you’ve got to stand most of the time.</p>

<p>I definitely regret not getting entry into the Imperial Palace because there was some impressive art and interiors, but in the back of my mind I know its not going anywhere and Japan might be a place I’d like to return to in decades to come.</p>

<p><img src="https://storage.googleapis.com/images-for-blog-ad4ea432-25af-4ea4-8d4b-58ea84408c68/photo-backups/central-japan/ImperialPalaceKyoto.jpeg" alt="KyotoPalace" /></p>

<p>A representation of not being able to see something nice
<img src="https://storage.googleapis.com/images-for-blog-ad4ea432-25af-4ea4-8d4b-58ea84408c68/photo-backups/central-japan/KyotoArt.jpeg" alt="KyotoArt" /></p>

<p>Kinkaku-Ji was impressive and the walk around the site was probably the most beautiful thing about it - in some ways not going in actually made it more mysterious and beautiful. Really through there is a one-way walk around the garden, but plenty of opportunities to get good photos and appreciate the beauty of the surroundings.</p>

<p><img src="https://storage.googleapis.com/images-for-blog-ad4ea432-25af-4ea4-8d4b-58ea84408c68/photo-backups/central-japan/GoldenRoofPlace.jpeg" alt="goldenplace" /></p>

<p>I should also state I actually used the Claude LLM to come up with itinerary which it did a fantastic job of repackaging other people’s travel blogs. It next suggested the ‘Geisha’ region of Kyoto - Gion. This was actually pretty but after the Post Towns it wasn’t that amazing to me.</p>

<p>The Inari Okami Tori gate procession is really cool. I went just before dusk and wow, I got people saying Kyoto was overtouristed. Basically 100s of us (at least) all arrived at once on trains and all went together through a long, dark narrow passageway - this was the only place that felt close to being dangerous with overcrowding. I could definitely see some pushing and fights the way people would just abruptly stop for selfies and try and chase people out of their shots. I chilled out and waited for darkness before going up by a back route which was actually extremely pleasant. I’m actually a fox fan so I really enjoyed seeing the <em>Kitsune</em>. I loved the Inari Okami lore - that foxes hunting in rice fields were the guardians of the rice, and also with bonus transformations into beautiful beguiling women.</p>

<p><img src="https://storage.googleapis.com/images-for-blog-ad4ea432-25af-4ea4-8d4b-58ea84408c68/photo-backups/central-japan/ToriGates.jpeg" alt="Tori" /></p>

<p><img src="https://storage.googleapis.com/images-for-blog-ad4ea432-25af-4ea4-8d4b-58ea84408c68/photo-backups/central-japan/InariOkami.jpeg" alt="InariOkami" /></p>

<p>On my way down I saw a woman doing a photoshoot - hopefully this doesn’t count as an invasion of privacy - I just loved the lighting (shame about that stupid pole in the way)</p>

<p><img src="https://storage.googleapis.com/images-for-blog-ad4ea432-25af-4ea4-8d4b-58ea84408c68/photo-backups/central-japan/KyotoPhotoshootLady.jpeg" alt="KyotoTradFemme" /></p>

<h2 id="osaka-is-ok">Osaka (is OK)</h2>

<p>Osaka was probably the place I regret visiting the most. Just to stress there’s absolutely nothing wrong with it and I’m sure its a nice place but it probably the only place I went to ‘just because’. I think its main draw is as a party/eating destination but as a solo tourist its kind of a lottery in who you meet as to how this pans out. Fortunately I did experience a nice whiskey bar with a dude from the hostel, but it was noticeable that everyone who walked through the door was a tourist. This was the case in a central zone as well - it <em>felt</em> like the most touristic place I visited, which was strange, especially after Kyoto and the Post Towns. Anyway I’ve got no great insights or experiences.</p>

<h4 id="night-photography-aside">Night Photography Aside</h4>

<p>This whole trip I definitely learned a tonne about photography and I really felt my photos improved. I’ll share a couple of night scenes here - I think I still wasn’t getting the exposure quite right - they’re probably more dark than really was happening but I was happy enough with the effect. The thing I found was after a couple of night/street photos they all start looking quite samey and strangely I found it hard to give the photos a sense of energy, at least that matched the energy and dynamism of a late evening street in a large Japanese city.</p>

<p><img src="https://storage.googleapis.com/images-for-blog-ad4ea432-25af-4ea4-8d4b-58ea84408c68/photo-backups/central-japan/osaka-nigh-scenes.jpeg" alt="NightOsaka" /></p>]]></content><author><name>Edmund Steele</name></author><category term="japan" /><summary type="html"><![CDATA[Nagoya (is not boring)]]></summary></entry><entry><title type="html">Matsumoto, Kamikochi and the Kiso Valley</title><link href="http://localhost:4000/japan/travel/2024/10/25/matusmoto-nakesendo.html" rel="alternate" type="text/html" title="Matsumoto, Kamikochi and the Kiso Valley" /><published>2024-10-25T19:41:18+01:00</published><updated>2024-10-25T19:41:18+01:00</updated><id>http://localhost:4000/japan/travel/2024/10/25/matusmoto-nakesendo</id><content type="html" xml:base="http://localhost:4000/japan/travel/2024/10/25/matusmoto-nakesendo.html"><![CDATA[<p>In the Autumn of 2024 I visited Japan, which is an awesome place to visit and the first stop along the way I went to was Matsumoto, Kamikochi and the Kiso Valley.</p>

<p>Getting here from Tokyo was pretty straightforward, you can either get a bus or a train which both take about the same amount of time. I took the train because it was easier to fall asleep which I desperately needed after my long flight.</p>

<p>I think even after the whole trip Matsumoto might even have been my favourite place in Japan - I think the reasons were a (by Japanese standards) relaxed and laid back pace of life, beautiful surroundings and many old buildings surviving. It actually felt closest to a European Spa or Ski town, very chill and with some of the friendliest people I encountered in Japan.</p>

<p>The castle is probably the biggest draw if you’re just passing through, but I was mainly here to see the mountains.</p>

<p><img src="https://storage.googleapis.com/images-for-blog-ad4ea432-25af-4ea4-8d4b-58ea84408c68/photo-backups/IMG_5941.jpeg" alt="MatsumotoCastleAtSunset" /></p>

<p><img src="https://storage.googleapis.com/images-for-blog-ad4ea432-25af-4ea4-8d4b-58ea84408c68/photo-backups/IMG_5872.jpeg" alt="MatsumotoCastleAtNight" /></p>

<p>It is quite unusual to have such a well preserved castle in Japan, both due to the Meiji era destruction of Japan’s feudal legacy, earthquakes and WW2 bombing so Matsumoto is one of the best ways to see a (mostly) original 17th century castle so close to Tokyo.</p>

<p>The Valley between the mountains</p>

<p><img src="https://storage.googleapis.com/images-for-blog-ad4ea432-25af-4ea4-8d4b-58ea84408c68/photo-backups/IMG_0698.jpeg" alt="MatsumotoValley" /></p>

<h3 id="kamikcohi">Kamikcohi</h3>

<p>Kamikochi is a mountain climbing and camping resort in some of Japan’s highest mountains. Its not really a town, more of a coach stop with some hotels used as a pit stop for hiking up the many mountain routes.</p>

<p>It’s extremely easy to do as a day trip from Matsumoto - you just go to the train station and buy a ticket. For some crazy reason you can’t buy a return and instead need to buy one when you get off the bus in Matsumoto (you go via a train then transfer to a bus). I think total it was about 8000 yen, which is £40 at the time I went which wasn’t unreasonable as its the main way for Kamikochi to make money off day trippers.</p>

<p>The Money Shot</p>

<p><img src="https://storage.googleapis.com/images-for-blog-ad4ea432-25af-4ea4-8d4b-58ea84408c68/photo-backups/IMG_5952.jpeg" alt="KamikochiValley" /></p>

<p>The hike I did with a couple of fit young guys was up Mount Yake Dake. I should stress this was totally doable as a day hike <em>if you are already very fit</em> if you’re not used to walking or are not so fit right now, or there’s adverse weather I would suggest not doing this. Even for us we found the ascent pretty tiring, and the downhill was a bit of a knee destroyer. That being said this was a fantastic hike and the views from the top, as well as the friendliness of the people there was so lovely. I’d like to thank the guy from the hostel who carried a coffee making kit all the way up and made us all some delicious black coffee - superstar!</p>

<p><img src="https://storage.googleapis.com/images-for-blog-ad4ea432-25af-4ea4-8d4b-58ea84408c68/photo-backups/IMG_5967.jpeg" alt="MountYakeDakeAscent" /></p>

<p><img src="https://storage.googleapis.com/images-for-blog-ad4ea432-25af-4ea4-8d4b-58ea84408c68/photo-backups/IMG_0765.jpeg" alt="MountYakeDakeSummit" /></p>

<p><img src="https://storage.googleapis.com/images-for-blog-ad4ea432-25af-4ea4-8d4b-58ea84408c68/photo-backups/ladders-yake-dake.jpeg" alt="Ladders" /></p>

<p>Back in Matsumoto there was even a bonus firework festival thrown which was free to enter with some live music and tasty food stalls which was a nice bonus! I was a little sad not to be able to spend more time there, but as a Japanese guy staying at the hostel pointed out there are mountains all over the world.</p>

<p>I would also really recommend <a href="https://www.couchpotatohostel.com/en/index.html">Couch Potato Hostel</a> as a place to stay with a lovely host and vibe.</p>

<h3 id="kiso-valleynakesendo">Kiso Valley/Nakesendo</h3>

<p>You can get to the Post Towns in the Kiso Valley very easily and pretty cheaply from Matsumoto. 
They’re definitely beautiful places but there’s not that much to do in them besides souvenir shopping. The history is that they were built to cater to travellers making the long walk between Kyoto and Edo/Tokyo in the Tokugawa Shogunate Era of Japan (1600-1850s).</p>

<p>Just based on hotel availability I stayed in a town called Nojiri on the path of the Nakesendo. At this point after several days of beautiful sunshine the weather turned extremely wet - wetter than anything I’d have experienced in the UK - just the force and the length of time it rained for were extremely unusual.</p>

<p>Staying in a more traditional hotel was pretty cool as well. 
<img src="https://storage.googleapis.com/images-for-blog-ad4ea432-25af-4ea4-8d4b-58ea84408c68/photo-backups/Japanese%20Hotel.jpeg" alt="JapaneseRuralHotel" /></p>

<p>Still this random town provided an absolutely beautiful hike when I walked to Magome via Nagiso and Tsumago.</p>

<p><img src="https://storage.googleapis.com/images-for-blog-ad4ea432-25af-4ea4-8d4b-58ea84408c68/photo-backups/Farming.jpeg" alt="RiceFarming" /></p>

<p><img src="https://storage.googleapis.com/images-for-blog-ad4ea432-25af-4ea4-8d4b-58ea84408c68/photo-backups/Bridges.jpeg" alt="WoodenBridge" /></p>

<p><img src="https://storage.googleapis.com/images-for-blog-ad4ea432-25af-4ea4-8d4b-58ea84408c68/photo-backups/twin-peaks.jpeg" alt="MistyMountains" /></p>

<p>I went an extremely long way - I was pretty much solidly walking from about 06:30 to 17:00 which was a little much, but the roads were mostly paved or very well maintained tracks so I made good progress. The wet weather got a little miserable - I mostly stayed dry enough but water pooled at the bottom of my backpack cover and made the inside wet. Be warned - prepare for absurd amounts of rainfall!</p>

<p>If I visited just one place I’d say Tsumago was my favourite post town, Magome got the most visitors wasn’t actually that beautiful and felt like it was straying into over-tourism with the extremely large numbers of tour groups. From a UK perspective it would be like going to Bibury in the Cotswolds - its not a fake village but it is just a living tourist trap.</p>

<p>Oh and the recommended hike of Magome -&gt; Tsumago at least when I did it was extremely busy - the photos of empty trails and pristine woodland are exaggerated. Not saying you wont get it, just that wasn’t my experience.</p>

<h3 id="in-summary">In summary</h3>

<p>This was an extremely approachable and fun outdoorsy start to the trip. Everything was pretty easy and with a bit of machine translation and sign language public transport was easy to navigate, reliable and fast. I don’t know if I’d recommend walking the whole Nakesendo as lots of Europeans were doing as there’s a lot of road walking seemingly but it was a cool thing to dip my toe into.</p>]]></content><author><name>Edmund Steele</name></author><category term="japan" /><category term="travel" /><summary type="html"><![CDATA[In the Autumn of 2024 I visited Japan, which is an awesome place to visit and the first stop along the way I went to was Matsumoto, Kamikochi and the Kiso Valley.]]></summary></entry><entry><title type="html">LLM’s will probably be a component of a truly intelligent system, not the system itself</title><link href="http://localhost:4000/software/2024/02/25/llms-need-a-source-of-truth.html" rel="alternate" type="text/html" title="LLM’s will probably be a component of a truly intelligent system, not the system itself" /><published>2024-02-25T18:41:18+00:00</published><updated>2024-02-25T18:41:18+00:00</updated><id>http://localhost:4000/software/2024/02/25/llms-need-a-source-of-truth</id><content type="html" xml:base="http://localhost:4000/software/2024/02/25/llms-need-a-source-of-truth.html"><![CDATA[<p>LLMs, while amazingly useful in so many ways, lack a concept of truth that will hold them back unless combined with a system capable of discerning true information from hallucinations.</p>

<h3 id="the-idea-of-hallucinations-is-a-marketing-gimmick">The idea of “hallucinations” is a marketing gimmick.</h3>

<p>There is no hallucination and there is no true output. A LLM produces whatever is statistically likely - in contrast a fact is not statistically likely, a fact simply is.</p>

<p>I’ve seen so many news reports that after listing the upside of an LLM will list the downsides, and will often list a “tendency to hallucinate” as a drawback. No. This isn’t something that can be fixed by the LLM itself. Take arithmetic - an early problem with ChatGPT was its failure to add numbers together. Thankfully this was fixed down this line by sending maths looking questions to an actual calculator. GPT didn’t ‘learn maths’; someone just added a subsystem to bypass the LLM where it was appropriate to. To fix maths in an LLM you’d need enough data covering enough arithmetic questions written in everyday language to be built into the model. Or you could just use existing arithmetic logic - something computers were built to do.</p>

<p>So this is a flawed example. No-one needs or wants AI to do arithmetic, that’s been a solved problem for decades now. Where we are currently seeing problems is a misapplication of AI into roles where truth is expected.</p>

<h3 id="llms-are-not-search-engines">LLMs are not search engines</h3>

<p>I used to work with a publishing company that provided services around analysing textual data for example providing a specialist search engine. While I worked in the grubby web development team, I sat across a row of desks for the data science team. This was before the AI explosion from 2021 onwards but they were of course well aware of the developments of GPT-2 - and for the most part they understood it to be a tool for a different problem. It was understood that when someone requested data relating to a certain topic or existing content they wanted … well content related to that topic or term. They didn’t want content that <em>might</em> relate to their query.</p>

<p>We’ve already seen a legal case thrown out because a lawyer trusted a response from an LLM about a non-existent case. In most cases I imagine we’re already seeing lower impact damage from researchers and analysts making mistaken conclusions from inaccurate but correct sounding output.</p>

<h3 id="llm-chatbots">LLM chatbots</h3>

<p>This is more likely to be a flash in the pan as companies will quickly realise their mistake in allowing ChatGPT free rein to help their customers. Personally I find AI chatbots exceedingly irritating but I’ll imagine that will improve as GPT slurps up more data. Recently an LLM put one statistically likely foot in front of the other and invented a refund policy that the parent company had to honour.</p>

<p>This is exceptionally silly. An LLM should never have been allowed to start generating text related to a refund policy. The overall system should have detected the customer was asking about refunds and stepped in with a deterministic print out of the company’s official refund policy and probably a number to call for a human. This would imply the existence of a second regulating system on top of GPT that checks and controls inputs and outputs from the internal GPT model to ensure they make sense.</p>

<h3 id="my-002">My $0.02</h3>

<p>So in these 3 examples we need a mind outside of GPT that can verify its responses. For now that’s us but does it have to be? Could we build a machine that is itself endogenously capable of somehow knowing what is true and what isn’t? If you’re a materialist then the answer clearly is yes - because we as biological machines can already do it. The question is how? I know actually - <em>but I’ll only tell you for 7 trillion USD!</em></p>

<p>For now I think the answer is always remembering to verify anything that sounds like a fact from GPT, and for software use cases wrapping the GPT input/output away from direct external usage and carefully controlling the communication through programmed rules. Someday this may look like an anachronism but for now although GPT will inevitably get better and better as it consumes more data, it can never know what it is saying is true.</p>]]></content><author><name>Edmund Steele</name></author><category term="software" /><summary type="html"><![CDATA[LLMs, while amazingly useful in so many ways, lack a concept of truth that will hold them back unless combined with a system capable of discerning true information from hallucinations.]]></summary></entry><entry><title type="html">Things I’ve learnt as a self taught software developer</title><link href="http://localhost:4000/software/2024/02/18/what-id-tell-a-younger-me.html" rel="alternate" type="text/html" title="Things I’ve learnt as a self taught software developer" /><published>2024-02-18T09:41:18+00:00</published><updated>2024-02-18T09:41:18+00:00</updated><id>http://localhost:4000/software/2024/02/18/what-id-tell-a-younger-me</id><content type="html" xml:base="http://localhost:4000/software/2024/02/18/what-id-tell-a-younger-me.html"><![CDATA[<p>I’ve now been a ‘self taught’ developer with 6 years professional experience. The process of reviewing graduate applications for my company has got me thinking about things that I’ve learnt coming into the industry and as I’ve gained more experience. I’ve got some groupings here that go beyond the non obvious stuff (know how to code)</p>

<h2 id="be-someone-people-want-to-work-with">Be someone people want to work with</h2>

<p>As a case study to illustrate this I’d like to talk about 2 people I’ve worked with previously. One was probably the best developer I’ve ever worked with, one was bang average. One rose through the ranks with amazing speed, one was borderline pushed out of their job. The difference? One of them was someone people liked working with.</p>

<p>To illustrate the point I had to visit Amsterdam to work for a period of time very early both in my career and in a new job, and I knew absolutely no-one there. Despite working in a totally different team Mr Soft Skills introduced himself and made sure to introduce me to the rest of the team (which my boss hadn’t bothered to do) took me to lunch and made sure I was settling in OK. It was genuinely such a small thing but the fact I still remember it so long after shows the impact these gestures can have. If everyone you work with has positive interactions like this with you it makes such a huge difference. This is something I personally sometimes struggle with - I’m quite proud and can sometimes get annoyed if condescended to or if dragged into something that’s not my responsibility.</p>

<h2 id="learn-the-theory">Learn the theory</h2>

<p>This is true if you haven’t done a CompSci or Software Engineering degree and is potentially true even if you have. While you’re starting a first job or as a junior it can be overwhelming so don’t always feel you have to work constantly. No-one ever expects you to immediately start producing like a senior developer but if you want to progress you will need to catch-up on things many of your colleagues will have learnt at university.</p>

<p>There’s some great resources out there, especially <a href="https://teachyourselfcs.com">TeachYourselfCS</a> and many free Youtube lecture series. In terms of importance my recommendations for areas of focus would be (from a BE developer perspective)</p>

<ol>
  <li>Learn another programming language in a different paradigm - e.g. if you know Python learn (some) Functional Programming, if you’ve only used Javascript learn some Java. This will stop you getting stuck in one way of thinking and broaden how you think about code in general.</li>
  <li>Databases - understand things like transaction isolation levels, broadly how query optimisation works and concurrency models. Schema design is very often the most critical part of application design, yet it is often overlooked by self taught developers.</li>
  <li>Algorithms and Data Structures. Initially this may seem like overkill but the wrong data structure choice can absolutely scupper an application.</li>
  <li>Networking - doesn’t have to be super in depth but knowing the basics of DNS/HTTP will serve you well in our distributed computing world.</li>
</ol>

<h2 id="dont-be-picky-for-your-first-job">Don’t be picky for your first job</h2>

<p>If you don’t have a CS degree or any proven experience getting a first job is rough, especially at the time of writing. My only experience of programming before I got a job was writing Data Science-esque code at university in Python. My first job was writing a Spring Java monolith for a small Insurance company in my hometown where I lived with my Mum.</p>

<p>Was it glamorous or prestigious? No. Did I like Java? Eh. Did I enjoy it? Sometimes. Was it good for my career? To an almost absurd degree yes.</p>

<p>When you start working you’ll learn far more than by teaching yourself, generally if you’re enthusiastic your fellow engineers will be more than happy to talk to you about anything and everything. I learnt so much about low level programming, how to help out with sales calls, how to work with product managers, the list goes on. This is almost impossible to self learn. I actually feel bad for ‘kids these days’ that are going to miss out on working in person and learning this stuff through osmosis but do what you can.</p>

<h2 id="make-mistakes-and-learn-from-them">Make mistakes and learn from them</h2>

<p>The most successful developers I’ve worked with have invariably been ones who have put themselves forward for new projects and suggested their own. At some point you need to make bold decisions yourself and suffer the consequences. I’ve been responsible for some disasters in my time, but really - looking back on them - they were fairly minor incidents that everyone else forgot about in a day or two.</p>

<p>I’ll tell you what though - experiments that pay off can be some of the most rewarding things you can do. They’re really a win-win: either your company gets a cool new feature or you learn for the rest of your career why something is a bad idea! (This depends on working somewhere that sees problems as a learning experience and not a stick to beat someone with)</p>

<h2 id="you-are-not-your-code">You are not your code</h2>

<p>Negative feedback on code submissions can be upsetting but never take it personally. Fundamentally you are making a product for a company - it’s never ‘yours’. There’s nothing more frustrating than a Junior Developer defending crazy design decisions because they can’t bear to be ‘wrong’. Of course some PR reviewers can be nasty. I hope you don’t experience this.</p>

<p>Generally, especially early in your career if you disagree with a comment ask the reviewer to explain it in person. 9/10 you’ll learn something new, the other 1/10 will be developers unaware there’s a new and maybe better way to do something - this is your time to shine! See a PR review as a learning experience and bear in mind that you too will think the code you’re writing now is terrible in a few years time.</p>]]></content><author><name>Edmund Steele</name></author><category term="software" /><summary type="html"><![CDATA[I’ve now been a ‘self taught’ developer with 6 years professional experience. The process of reviewing graduate applications for my company has got me thinking about things that I’ve learnt coming into the industry and as I’ve gained more experience. I’ve got some groupings here that go beyond the non obvious stuff (know how to code)]]></summary></entry></feed>